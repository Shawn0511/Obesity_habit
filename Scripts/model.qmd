---
title: "Model Training"
format: html
---

```{python}
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score, f1_score

# Encode and split
df = pdf.copy()
X = df.drop(columns=["NObeyesdad"])
y = df["NObeyesdad"]

X = pd.get_dummies(X)
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)
```


## Logistic Regression (Tuning)

```{python}
lr_pipe = Pipeline([
    ('scaler', StandardScaler()),
    ('clf', LogisticRegression(multi_class="multinomial", max_iter=500))
])

lr_params = {
    "clf__C": [0.1, 1, 10],
    "clf__penalty": ["l2"]
}

lr_grid = GridSearchCV(lr_pipe, lr_params, cv=5, scoring="accuracy")
lr_grid.fit(X_train, y_train)
print(f"Best Logistic Regression Params: {lr_grid.best_params_}")
```