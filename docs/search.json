[
  {
    "objectID": "Scripts/modelling_and_evaluation.html",
    "href": "Scripts/modelling_and_evaluation.html",
    "title": "Model Training",
    "section": "",
    "text": "Show Code\n# Load libraries\nimport pandas as pd\nimport joblib\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score\n\n# Encode and split\ndf = pd.read_csv(\"../Data/cleaned_obesity.csv\")\nX = df.drop(columns=[\"NObeyesdad\"])\ny = df[\"NObeyesdad\"]\n\n\nnumeric_cols = [\"Age\", \"Height\", \"Weight\", \"FCVC\", \"NCP\", \"CH2O\", \"FAF\", \"TUE\"]\ncategorical_cols = [\"Gender\", \"family_history_with_overweight\", \"FAVC\", \"CAEC\", \n                    \"SMOKE\", \"SCC\", \"CALC\", \"MTRANS\"]\n\n# Encode label\nlabel_encoder = LabelEncoder()\ny_encoded = label_encoder.fit_transform(y)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y_encoded, stratify=y_encoded, test_size=0.2, random_state=42)\n\n# Define preprocessing\npreprocessor = ColumnTransformer([\n    (\"num\", StandardScaler(), numeric_cols),\n    (\"cat\", OneHotEncoder(handle_unknown=\"ignore\"), categorical_cols)\n])"
  },
  {
    "objectID": "Scripts/modelling_and_evaluation.html#define-models-and-tuning-logistic-regression-lr-random-forestrf-decision-treedt",
    "href": "Scripts/modelling_and_evaluation.html#define-models-and-tuning-logistic-regression-lr-random-forestrf-decision-treedt",
    "title": "Model Training",
    "section": "0.1 Define models and tuning: Logistic Regression (LR); Random Forest(RF); Decision Tree(DT)",
    "text": "0.1 Define models and tuning: Logistic Regression (LR); Random Forest(RF); Decision Tree(DT)\n\n\nShow Code\n# Define models\nmodels = {\n    \"Logistic Regression\": LogisticRegression(max_iter=1000, multi_class=\"multinomial\"),\n    \"Random Forest\": RandomForestClassifier(),\n    \"Decision Tree\": DecisionTreeClassifier()\n}\n\n# Define hyperparameter grids\nparams = {\n    \"Logistic Regression\": {\"model__C\": [0.1, 1, 10]},\n    \"Random Forest\": {\"model__n_estimators\": [100, 200], \"model__max_depth\": [5, 10]},\n    \"Decision Tree\": {\"model__max_depth\": [3, 5, 7]}\n}\n\n# Perform grid search for each model\ngrids = {}\nfor name in models:\n    pipe = Pipeline(steps=[\n        (\"preprocessor\", preprocessor),\n        (\"model\", models[name])\n    ])\n    grid = GridSearchCV(pipe, param_grid=params[name], cv=5, scoring=\"accuracy\", n_jobs=1)\n    grid.fit(X_train, y_train)\n    grids[name] = grid\n    print(f\"{name} best parameters: {grid.best_params_}\")\n    joblib.dump(grid, f\"../Models/{name.replace(' ', '_')}_model.pkl\")\n\n\nE:\\Github_Shawn\\Obesity_habit\\.venv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\nE:\\Github_Shawn\\Obesity_habit\\.venv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\nE:\\Github_Shawn\\Obesity_habit\\.venv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\nE:\\Github_Shawn\\Obesity_habit\\.venv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\nE:\\Github_Shawn\\Obesity_habit\\.venv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\nE:\\Github_Shawn\\Obesity_habit\\.venv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\nE:\\Github_Shawn\\Obesity_habit\\.venv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\nE:\\Github_Shawn\\Obesity_habit\\.venv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\nE:\\Github_Shawn\\Obesity_habit\\.venv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\nE:\\Github_Shawn\\Obesity_habit\\.venv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\nE:\\Github_Shawn\\Obesity_habit\\.venv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\nE:\\Github_Shawn\\Obesity_habit\\.venv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\nE:\\Github_Shawn\\Obesity_habit\\.venv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\nE:\\Github_Shawn\\Obesity_habit\\.venv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\nE:\\Github_Shawn\\Obesity_habit\\.venv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\nE:\\Github_Shawn\\Obesity_habit\\.venv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\n\n\nLogistic Regression best parameters: {'model__C': 10}\nRandom Forest best parameters: {'model__max_depth': 10, 'model__n_estimators': 200}\nDecision Tree best parameters: {'model__max_depth': 7}"
  },
  {
    "objectID": "Scripts/eda.html",
    "href": "Scripts/eda.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "Show Code\nimport pandas as pd\nimport joblib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import chi2_contingency, f_oneway\n\n# Load and clean data\npdf = pd.read_csv(\"../Data/ObesityDataSet_raw_and_data_sinthetic.csv\")\npdf = pdf.dropna()\npdf.columns = pdf.columns.str.strip()"
  },
  {
    "objectID": "Scripts/eda.html#class-distribution",
    "href": "Scripts/eda.html#class-distribution",
    "title": "Exploratory Data Analysis",
    "section": "1 Class distribution",
    "text": "1 Class distribution\n\n\nShow Code\nclass_counts = pdf['NObeyesdad'].value_counts()\nsns.barplot(x=class_counts.index, y=class_counts.values)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution\")\nplt.show()"
  },
  {
    "objectID": "Scripts/eda.html#cramérs-v-analysis-categorical",
    "href": "Scripts/eda.html#cramérs-v-analysis-categorical",
    "title": "Exploratory Data Analysis",
    "section": "2 Cramér’s V Analysis (Categorical)",
    "text": "2 Cramér’s V Analysis (Categorical)\n\n\nShow Code\ndef cramers_v(confusion_matrix):\n    chi2 = chi2_contingency(confusion_matrix)[0]\n    n = confusion_matrix.sum()\n    phi2 = chi2 / n\n    r, k = confusion_matrix.shape\n    phi2corr = max(0, phi2 - (k-1)*(r-1)/(n-1))\n    rcorr = r - (r-1)**2/(n-1)\n    kcorr = k - (k-1)**2/(n-1)\n    return np.sqrt(phi2corr / min((kcorr-1), (rcorr-1)))\n\ncategorical_cols = [\"Gender\", \"family_history_with_overweight\", \"FAVC\", \"CAEC\", \"SMOKE\", \"SCC\", \"CALC\", \"MTRANS\"]\n\nfor col in categorical_cols:\n    if col == \"NObeyesdad\": continue\n    table = pd.crosstab(pdf[col], pdf[\"NObeyesdad\"])\n    print(f\"Cramér’s V between {col} and NObeyesdad: {cramers_v(table.values):.3f}\")\n\n\nCramér’s V between Gender and NObeyesdad: 0.556\nCramér’s V between family_history_with_overweight and NObeyesdad: 0.540\nCramér’s V between FAVC and NObeyesdad: 0.328\nCramér’s V between CAEC and NObeyesdad: 0.352\nCramér’s V between SMOKE and NObeyesdad: 0.111\nCramér’s V between SCC and NObeyesdad: 0.235\nCramér’s V between CALC and NObeyesdad: 0.225\nCramér’s V between MTRANS and NObeyesdad: 0.179"
  },
  {
    "objectID": "Scripts/eda.html#anova-numerical",
    "href": "Scripts/eda.html#anova-numerical",
    "title": "Exploratory Data Analysis",
    "section": "3 ANOVA (Numerical)",
    "text": "3 ANOVA (Numerical)\n\n\nShow Code\nnumeric_cols = [\"Age\", \"Height\", \"Weight\", \"FCVC\", \"NCP\", \"CH2O\", \"FAF\", \"TUE\"]\n\nfor col in numeric_cols:\n    groups = [group[col].values for _, group in pdf.groupby(\"NObeyesdad\")]\n    f_stat, p_val = f_oneway(*groups)\n    print(f\"ANOVA for {col}: F={f_stat:.2f}, p={p_val:.2e}\")\n\n\nANOVA for Age: F=77.95, p=3.59e-88\nANOVA for Height: F=38.43, p=1.69e-44\nANOVA for Weight: F=1966.52, p=0.00e+00\nANOVA for FCVC: F=112.32, p=3.73e-123\nANOVA for NCP: F=26.81, p=6.26e-31\nANOVA for CH2O: F=16.17, p=2.84e-18\nANOVA for FAF: F=17.48, p=7.65e-20\nANOVA for TUE: F=7.88, p=2.07e-08"
  },
  {
    "objectID": "Scripts/eda.html#visual-eda",
    "href": "Scripts/eda.html#visual-eda",
    "title": "Exploratory Data Analysis",
    "section": "4 Visual EDA",
    "text": "4 Visual EDA\n\n\nShow Code\n# boxplot\nsns.boxplot(x=\"NObeyesdad\", y=\"Weight\", data=pdf)\nplt.xticks(rotation=45)\nplt.title(\"Weight by Obesity Class\")\nplt.tight_layout()\nplt.show()\n\n# heatmap plot\nsns.heatmap(pdf[numeric_cols].corr(), annot=True, cmap=\"coolwarm\")\nplt.title(\"Correlation Heatmap (Numerical Features)\")\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow Code\n# Save it as preprocessed data\npdf.to_csv(\"../Data/cleaned_obesity.csv\", index=False)"
  },
  {
    "objectID": "Scripts/index.html",
    "href": "Scripts/index.html",
    "title": "Obesity Prediction Based on Eating Habits and Physical Condition",
    "section": "",
    "text": "This project explores a dataset on eating habits and physical condition among adults in Latin America to predict obesity levels. We apply data exploration techniques, hypothesis testing (Cramér’s V, ANOVA), and train several classification models (Logistic Regression, Random Forest, Decision Tree).\n\n\n\n\nFile: ObesityDataSet_raw_and_data_sinthetic.csv\nSource: UCI Machine Learning Repository\n\n\n\n\n\n\nClean and preprocess the data\nPerform exploratory analysis (categorical and numerical relationships)\nTrain and evaluate multiple classifiers"
  },
  {
    "objectID": "Scripts/index.html#project-summary",
    "href": "Scripts/index.html#project-summary",
    "title": "Obesity Prediction Based on Eating Habits and Physical Condition",
    "section": "",
    "text": "This project explores a dataset on eating habits and physical condition among adults in Latin America to predict obesity levels. We apply data exploration techniques, hypothesis testing (Cramér’s V, ANOVA), and train several classification models (Logistic Regression, Random Forest, Decision Tree).\n\n\n\n\nFile: ObesityDataSet_raw_and_data_sinthetic.csv\nSource: UCI Machine Learning Repository\n\n\n\n\n\n\nClean and preprocess the data\nPerform exploratory analysis (categorical and numerical relationships)\nTrain and evaluate multiple classifiers"
  }
]